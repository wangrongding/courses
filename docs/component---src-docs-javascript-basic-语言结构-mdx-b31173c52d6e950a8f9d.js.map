{"version":3,"sources":["webpack:///../src/docs/javascript/basic/语言结构.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","file":"component---src-docs-javascript-basic-语言结构-mdx-b31173c52d6e950a8f9d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/wuliang/WorkSpace.localized/courses/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { JCode } from '@/JCode';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"语言结构\"\n    }}>{`语言结构`}</h1>\n    <h2 {...{\n      \"id\": \"字符集\"\n    }}>{`字符集`}</h2>\n    <p>{`JavaScript的代码支持`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.baike.com/wiki/Unicode%E7%A0%81/5048130?view_id=r4i0gymwee800\"\n      }}>{`Unicode`}</a>{`字符集（HTML和CSS代码也是），这意味着你可以使用几乎所有的拉丁文、亚洲符号文字和汉字来编写程序。开发者常用的Visual Studio Code编辑器就是一款支持Unicode字符集UTF-8编码的文本编辑器，能够很好地支持使用Unicode编写JavaScript代码。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const CARD_POINTS = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'K', 'Q'];\n\nconst CARD_SUITS = ['♥️', '♠️', '♣️', '♦️'];\n\nfunction getRandomItem(list) {\n  return list[Math.floor(Math.random() * list.length)];\n} \n\nfunction getRandomCard() {\n  const point = getRandomItem(CARD_POINTS);\n  const suit = getRandomItem(CARD_SUITS);\n  return [point, suit];\n}\n`}</code></pre>\n\n    <JCode codeId=\"7103780443895365668\" mdxType=\"JCode\" />\n    <p>{`Unicode是计算机科学领域关于文本表示的一项标准，用于处理世界上所有文字和符号。Unicode包括字符集和编码方案。Unicode字符集几乎囊括所有的拉丁文、汉字和其他常用文字符号以及颜文字（emoji）。UTF-8是一种常用的Unicode编码方案，以少至2个字节，多至6个字节来表示Unicode字符。UTF-8是现在大部分浏览器默认支持的编码方案，也是HTTP传输文本内容的通用编码。我们在HTML文件中使用meta标签定义`}<inlineCode parentName=\"p\">{`<meta charset=\"UTF-8\">`}</inlineCode>{`就是告诉浏览器网页的内容是使用UTF-8编码的。`}</p>\n    <p>{`上面的例子里，我们使用了英文字符和四个emoji字符`}<inlineCode parentName=\"p\">{`'♥️', '♠️', '♣️', '♦️'`}</inlineCode>{`。`}</p>\n    <p>{`虽然JavaScript支持unicode，我们可以使用中文来命名变量和函数，但是我们通常不推荐这样做：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let 数据 = [0, 1, 2, 3, 4, 5];\nfunction 求和(数据){\n  return 数据.reduce((汇总,数) => 汇总 += 数);\n}\nconsole.log(求和(数据)); // 15\n`}</code></pre>\n    <p>{`上面的代码是可以运行的，但是除非有特殊目的，否则我们很少这么做。通常还是应该使用英文来编写代码（如：以下代码段），只有在字符串中才使用其他非英文字符。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let data = [0, 1, 2, 3, 4, 5];\n\nfunction sum(data) {\n  return data.reduce((sum, num) => sum += num);\n}\nconsole.log(sum(data)); // 15\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"unicode字符编码\"\n    }}>{`Unicode字符编码`}</h2>\n    <p>{`考虑一些系统可能不能支持Unicode字符集和utf8编码，JavaScript提供了针对Unicode的转义符，可以将任意Unicode字符转换成'\\\\u'开头，后面跟上这个字符的4位十六进制数字编码的形式。这样的写法对于JavaScript引擎来说与直接写Unicode字符是完全等价的，可以互相替换。这可以让JavaScript代码和它处理的数据能够被仅支持ASCII字符集的系统传输和处理，不过由于要将一个Unicode字符转换成6个字节（`}<inlineCode parentName=\"p\">{`'\\\\u' + 4个16进制字符，所以是6个字节`}</inlineCode>{`），因此要消耗更多的存储空间。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// \\\\u7a00\\\\u571f\\\\u6398\\\\u91d1 分别表示“稀土掘金”这四个中文\n// 因此下面的console.log在控制台上输出字符串“稀土掘金”\nconsole.log('\\\\u7a00\\\\u571f\\\\u6398\\\\u91d1');\n`}</code></pre>\n    <p>{`不仅仅是字符串，JavaScript的符号也可以用Unicode编码作变量名（但同样不推荐使用🐶）：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// \\\\u6211代表'我'这个中文汉字，所以在JavaScript代码文件里，\\\\u6211和'我'可以互相替换\nconst \\\\u6211 = '张三';\n\nconsole.log(我); //张三\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"符号tokens\"\n    }}>{`符号（Tokens）`}</h2>\n    <p>{`JavaScript程序文本由一系列符号（tokens）、行结束符（line terminators）、注释（comments）和空白符（white space）构成。`}</p>\n    <p>{`符号是构成JavaScript基本词汇（lexical）的元素，JavaScript的符号包含以下几类：`}</p>\n    <ol>\n      <li parentName=\"ol\">{`标识符（IdentifierName）：由Unicode组成的符号，它可以是变量名、函数名以及保留字（Reserved Words）。`}</li>\n      <li parentName=\"ol\">{`字面量（Literals）：直接表示程序中的某些数据的符号，包括Null字面量、Boolean字面量、Number字面量、String字面量以及正则表达式（RegularExpression）字面量等。`}</li>\n      <li parentName=\"ol\">{`标点符（Punctuators）：JavaScript表达式中连接标识名与字面量的运算符以及表示结构的花括号、小括号、中括号、点、分号、逗号、冒号等。`}</li>\n      <li parentName=\"ol\">{`模板(Templates)：模板字面量。`}</li>\n    </ol>\n    <p>{`其中模板比较复杂，后续会专门介绍，在这里我们先看一下前面几类：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function greeting(message = 'world') {\n  return 'Hello ' + message;\n}\nconst message = greeting('everyone');\nconsole.log(message);\n`}</code></pre>\n    <p>{`上面的代码中，`}<inlineCode parentName=\"p\">{`function, greeting, message, return`}</inlineCode>{` 等都是标识名，`}<inlineCode parentName=\"p\">{`(, ), {, }, +, = `}</inlineCode>{` 等都是标点符，`}<inlineCode parentName=\"p\">{`'Hello ', 'world', 'everyone'`}</inlineCode>{` 等都是字面量。`}</p>\n    <h3 {...{\n      \"id\": \"标识符\"\n    }}>{`标识符`}</h3>\n    <p>{`标识符又分为名字（Names）和保留字（Reserved Words）。`}</p>\n    <p>{`JavaScript规范的名字是以`}<strong parentName=\"p\">{`英文字母、下划线`}<inlineCode parentName=\"strong\">{`_`}</inlineCode>{`、`}<inlineCode parentName=\"strong\">{`$`}</inlineCode>{`符号、Unicode编码反斜杠`}<inlineCode parentName=\"strong\">{`\\\\`}</inlineCode>{`或中文等合法的Unicode字符组成的字符串`}</strong>{`，注意名字不能以阿拉伯数字、`}<inlineCode parentName=\"p\">{`#`}</inlineCode>{`和标点符号开头，名字中也不能包含空格、换行和标点符号。`}</p>\n    <p>{`保留字是一种特殊的标识符，本身包含特殊含义，不能作为名字使用。如上面例子中的`}<inlineCode parentName=\"p\">{`function`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`return`}</inlineCode>{`就是保留字。`}</p>\n    <p>{`保留字又分两种，一种是关键字（keywords），包含JavaScript词法含义，例如`}<inlineCode parentName=\"p\">{`function`}</inlineCode>{`表示函数声明，`}<inlineCode parentName=\"p\">{`return`}</inlineCode>{`表示将其后的表达式作为函数返回值返回。`}</p>\n    <p>{`JavaScript的关键字包含以下这些：`}</p>\n    <p><inlineCode parentName=\"p\">{`await break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield`}</inlineCode></p>\n    <p>{`另一种保留字叫将来保留字（Future Reserved Words），是当前不作为JavaScript关键字但留给将来使用的。`}</p>\n    <p>{`将来保留字包括 `}<inlineCode parentName=\"p\">{`enum`}</inlineCode></p>\n    <p>{`以及在`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\"\n      }}>{`严格模式（strict mode）`}</a>{`下的`}</p>\n    <p><inlineCode parentName=\"p\">{`implements\tpackage\tprotected\tinterface\tprivate\tpublic static`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"字面量\"\n    }}>{`字面量`}</h3>\n    <p>{`字面量用于直接表示某些数据，例如例子中的`}<inlineCode parentName=\"p\">{`'world', 'Hello '`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`'everyone`}</inlineCode>{`都是String字面量，直接表示字符串`}<inlineCode parentName=\"p\">{`world, Hello, everyone`}</inlineCode>{`。`}</p>\n    <p>{`关于字面量，在下一节课基本数据类型中会有进一步详细介绍。`}</p>\n    <p>{`JavaScript区分大小写字母，所以不管在变量命名、关键字和字符串比较时，都会严格区分大小写字母：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`if(a > 0) { // 正确\n  ...\n}\n\nIF(a <= 0) { // 错误，关键字是if不是IF\n\n}\n\nlet a = \"hello world\",\n    b = \"Hello World\";\n\nconsole.log(a === b); // false，不相等，因为大小写不同\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"标点符\"\n    }}>{`标点符`}</h3>\n    <p>{`标点符包括`}<strong parentName=\"p\">{`运算符`}</strong>{`和`}<strong parentName=\"p\">{`结构符号`}</strong>{`。`}</p>\n    <p>{`运算符和标识符、字面量一起组成`}<strong parentName=\"p\">{`表达式`}</strong>{`，共同完成数据的运算。`}</p>\n    <p>{`结构符号指构成语句结尾的分号`}<inlineCode parentName=\"p\">{`;`}</inlineCode>{`和构成语句块的花括号`}<inlineCode parentName=\"p\">{`{, }`}</inlineCode>{`，在这里需要先了解一下`}<strong parentName=\"p\">{`语句`}</strong>{`和`}<strong parentName=\"p\">{`语句块`}</strong>{`的概念。`}</p>\n    <h2 {...{\n      \"id\": \"语句和语句块\"\n    }}>{`语句和语句块`}</h2>\n    <p>{`语句（Statement）是JavaScript的`}<strong parentName=\"p\">{`语法`}</strong>{`基本单位，一个语句由一个或多个Token构成。`}</p>\n    <p>{`JavaScript语句以分号结尾，分号代表语句的终止。`}</p>\n    <p>{`JavaScript的一个或多个语句可以组合构成语句块（Block）。`}</p>\n    <p>{`看一个例子：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function sum(n) {\n  let ret = 0;\n  let i = 1;\n  while(i <= n) {\n    ret += i;\n    i++;\n  }\n  return ret;\n}\nconsole.log(sum(10));\n`}</code></pre>\n    <p>{`上面的例子代码，包括函数声明语句、变量声明和初始化语句、while循环语句、表达式语句（在循环体语句块内）、return语句、函数调用语句等语句。`}</p>\n    <p>{`其中函数声明语句和while循环语句中包含有语句块。`}</p>\n    <p>{`语句和语句块是嵌套的，一些语句中可以包含语句块，语句块中又可以包含一条或多条语句。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`函数声明 \"function sum(n) {...}\"\n├── 变量声明及初始化 \"let ret = 0\"\n├── 变量声明及初始化 \"let i = 1\"\n├── while循环 \"while(i < n) {...}\"\n│   ├── 表达式 \"ret += i\"\n│   └── 表达式 \"i++\"\n└── return \"return ret\"\n`}</code></pre>\n    <p>{`JavaScript语句以分号结束，语句块以花括号`}<inlineCode parentName=\"p\">{`{...}`}</inlineCode>{`标记起始和结束。`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`对于JavaScript书写者来说，语句结束分号可以写，也可以省略不写。如果省略分号，JavaScript解释器会自己判断语句应该在哪里终止。这种机制被称为“`}<strong parentName=\"p\">{`自动插入分号（Automatic Semicolon Insertion）`}</strong>{`”机制。`}</p>\n    </blockquote>\n    <p {...{\n      \"className\": \"hint tip\"\n    }}>{`书写分号和不书写分号是JavaScript两种不同的代码书写风格，开发者们各有偏好。一些开源库采用书写分号的习惯，而另一些则省略分号，这里没有绝对的好坏。一般在做项目的时候，同一个项目需要采用一致的书写风格，这有利于项目的维护。`}</p>\n    <h2 {...{\n      \"id\": \"空白符\"\n    }}>{`空白符`}</h2>\n    <p>{`空白符是指在JavaScript的两个符号（Token）之间的能够插入的字符。JavaScript的符号与符号之间能够插入一个或多个ASCII空格符、TAB符。`}</p>\n    <h3 {...{\n      \"id\": \"换行\"\n    }}>{`换行`}</h3>\n    <p>{`通常符号与符号之间也能插入一个或多个换行符，但下面一些特殊情况不允许换行：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`return 和返回值之间`}</li>\n      <li parentName=\"ul\">{`break/continue 和label名之间`}</li>\n      <li parentName=\"ul\">{`变量和`}<inlineCode parentName=\"li\">{`++`}</inlineCode>{`、`}<inlineCode parentName=\"li\">{`--`}</inlineCode>{`后缀运算符之间`}</li>\n      <li parentName=\"ul\">{`throw 和异常对象之间`}</li>\n      <li parentName=\"ul\">{`箭头函数的参数列表和箭头`}<inlineCode parentName=\"li\">{`=>`}</inlineCode>{`之间`}</li>\n      <li parentName=\"ul\">{`yield 和迭代值之间`}</li>\n      <li parentName=\"ul\">{`async 和异步函数声明、函数表达式、方法名之间`}</li>\n    </ul>\n    <p>{`看几个简单的例子：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const a = 10, b = 20, c = 30;\n`}</code></pre>\n    <p>{`上面的例子，声明a、b、c三个变量，写成一行比较长，我们可以换行写，这样比较清晰：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const a = 10,\n  b = 20,\n  c = 30;\n`}</code></pre>\n    <p>{`我们在写多条语句或语句块的时候，也可以不换行，但是换行会使得代码看起来比较清晰：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function isPositiveNumber(n) { return n > 0 }\n`}</code></pre>\n    <p>{`一般我们习惯在语句块左括号后边换行：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function isPositiveNumber(n) {\n  return n > 0;\n}\n`}</code></pre>\n    <p>{`另一种编程风格是在语句块的左花括号之前换行：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function isPositiveNumber(n) \n{\n  return n > 0;\n}\n`}</code></pre>\n    <p>{`这是两种不同的代码书写风格，但我们推荐采用第一种。其中的一个原因是第一种写法比较紧凑，另一个原因是JavaScript的左花括号除了表示代码块起始之外，还有其他意义，比如表示一个对象（Object）也可以用花括号，那么当我们在函数中返回一个对象时：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function pointAdd(p1, p2) {\n  return {\n    x: p1.x + p2.x,\n    y: p1.y + p2.y,\n  };\n}\n`}</code></pre>\n    <p>{`由于我们之前说过return和返回值之间不能有换行，所以我们不能写成下面这样：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function pointAdd(p1, p2)\n{\n  return \n  {\n    x: p1.x + p2.x,\n    y: p1.y + p2.y,\n  };\n}\n`}</code></pre>\n    <p>{`上面的用法return和`}<inlineCode parentName=\"p\">{`{`}</inlineCode>{`之间不能有换行。否则函数将不会返回对象，而是会在return之后自动插入分号(ASI机制），返回undefined。`}</p>\n    <p>{`为了保持规则的一致性，显然第一种用法更加统一（统一在`}<inlineCode parentName=\"p\">{`{`}</inlineCode>{`之后再换行）。`}</p>\n    <h3 {...{\n      \"id\": \"缩进\"\n    }}>{`缩进`}</h3>\n    <p>{`注意到我们在前面所有例子里，对于同一层级的内容，在一行之前保持相同的空格或Tab数量。`}</p>\n    <p>{`这个规则叫做`}<strong parentName=\"p\">{`缩进`}</strong>{`，是为了增加代码的可读性，让代码便于被人阅读和理解。`}</p>\n    <p>{`缩进一般用Tab或空格（如果用空格通常是2个或4个空格表示一级缩进），不同项目或有不同，也是属于书写风格差异，但是同一个项目中使用空格或Tab作缩进需要统一。`}</p>\n    <h2 {...{\n      \"id\": \"注释\"\n    }}>{`注释`}</h2>\n    <p>{`JavaScript采用与C和Java语言一致的注释格式，分别用`}<inlineCode parentName=\"p\">{`//`}</inlineCode>{`表示单行注释，用`}<inlineCode parentName=\"p\">{`/*...*/`}</inlineCode>{`表示多行注释。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/*\n  我是\n  多行注释\n */\nconst foo = 'bar'; // 我是单行注释\nconsole.log(foo);\n`}</code></pre>\n    <p>{`书写必要的注释是让代码容易被人理解的好习惯。建议在项目中，任何代码源文件都应当尽量书写必要的注释。在代码迭代升级时，注释应当及时更新，并且与文档对应，内容准确简洁，这样有助于他人理解，能够降低后续维护的成本。`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
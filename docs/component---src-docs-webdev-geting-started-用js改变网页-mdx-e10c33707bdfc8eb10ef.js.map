{"version":3,"sources":["webpack:///../src/docs/webdev/geting_started/public/index-js-console2.jpg","webpack:///../src/docs/webdev/geting_started/用JS改变网页.mdx","webpack:///../src/docs/webdev/geting_started/public/index-blur-focus.jpg","webpack:///../src/docs/webdev/geting_started/public/html-css-javascript.jpg"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","require","name","src","isMDXComponent"],"mappings":"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","file":"component---src-docs-webdev-geting-started-用js改变网页-mdx-e10c33707bdfc8eb10ef.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/index-js-console2-21ce49170e778c166f1333b405aaec02.jpg\";","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/wuliang/WorkSpace.localized/courses/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { JCode } from '@/JCode';\nimport { Pagination } from '@/pagination';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"用js改变网页\"\n    }}>{`用JS改变网页`}</h1>\n    <h2 {...{\n      \"id\": \"javascript-初窥\"\n    }}>{`JavaScript 初窥`}</h2>\n    <p>{`在Web开发中，HTML、CSS和JavaScript各司其责，分别负责`}<strong parentName=\"p\">{`结构、表现和行为`}</strong>{`。在前几节课程中，我们了解了如何使用HTML组织页面结构和使用CSS实现设计效果。这一节课我将带领你们初步学习Javascript实现网页和用户的交互。`}</p>\n    <p><img alt=\"html css js\" src={require(\"./public/html-css-javascript.jpg\")} /></p>\n    <p>{`作为初学者，你可能还暂时不能完全领会这三者职责分离的本质，但是没关系，我们先把这个结论记在心里，通过一些小功能，来直观地体会一下JavaScript能在网页中做什么。`}</p>\n    <h3 {...{\n      \"id\": \"嵌入javascript\"\n    }}>{`嵌入javascript`}</h3>\n    <p>{`现在我们先在我们的博客首页中添加一小段JavaScript，让我们在body元素的结束标签之前增加一个script元素：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!DOCTYPE html>\n<html>\n  <head>\n    ...\n  </head>\n  <body>\n    <div id=\"main\">\n      ...\n    </div>\n    <div id=\"sidebar\">\n      ...\n    </div>\n    <script type=\"text/javascript\">\n      console.log('Hello world!');\n    </script>    \n  </body>\n</html>\n`}</code></pre>\n    <p><img alt=\"hello world\" src={require(\"./public/index-js-console2.jpg\")} /></p>\n    <p>{`添加了上面的JS后，我们用浏览器打开博客首页，在开发者工具的控制台中就会看到输出字符串`}<inlineCode parentName=\"p\">{`Hello world!`}</inlineCode>{`。`}</p>\n    <p>{`在网页中添加script元素，是嵌入JavaScript代码的一种方式，但不是唯一方式，就像在网页中添加style元素，是嵌入CSS代码的一种方式一样，在后续的课程里，我们有机会学习其他加载JavaScript、CSS的方式。`}</p>\n    <h3 {...{\n      \"id\": \"dom-api\"\n    }}>{`DOM API`}</h3>\n    <p>{`接下来我们修改一下script标签中的代码：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<script type=\"text/javascript\">\n  const pubtimeEls = document.querySelectorAll('.pubtime em');\n  pubtimeEls.forEach((el) => {\n    const date = new Date(el.innerHTML);\n    el.innerHTML = \\`\\${date.getMonth() + 1}月\\${date.getDate()}日, \\${date.getFullYear()}\\`;\n  });\n</script>\n`}</code></pre>\n    <p>{`JavaScript作为一门编程语言，有一整套规范的语法，在后续课程中我们要系统地学习JavaScript的语法和各种用法，在本课程里我们先只求有一个直观的认识即可，好在JavaScript语法简洁直观，本身并不难理解。`}</p>\n    <p>{`在上面的代码里，我们使用`}<inlineCode parentName=\"p\">{`document.querySelectorAll`}</inlineCode>{`方法来获得对应的元素。在前面的课程里我们提到过，HTML文档结构上是一棵对象树，称为DOM，即文档对象模型。浏览器为JavaScript提供了可以访问DOM树上各个节点的API（Appilaction Programming Interface），document.querySelectorAll就是其中的一个API，它的参数是CSS选择器，返回值是与该选择器匹配的文档上的所有元素节点。`}</p>\n    <p>{`JavaScript是一门面向对象的语言，一切皆是对象。\".\"是JavaScript的`}<strong parentName=\"p\">{`对象属性操作符`}</strong>{`，`}<inlineCode parentName=\"p\">{`document.querySelectorAll`}</inlineCode>{`从语义上来讲，即是`}<strong parentName=\"p\">{`document`}</strong>{`对象上的`}<strong parentName=\"p\">{`querySelectorAll`}</strong>{`方法。`}</p>\n    <p>{`我们通过`}<inlineCode parentName=\"p\">{`document.querySelectorAll('.pubtime em')`}</inlineCode>{`返回了网页上所有的发布时间中显示时间字符串的em元素组成的列表，然后我们通过forEach方法`}<strong parentName=\"p\">{`遍历`}</strong>{`这个列表中的每一个元素，通过`}<inlineCode parentName=\"p\">{`innerHTML`}</inlineCode>{`属性获取到这些em元素中的文字节点，即`}<inlineCode parentName=\"p\">{`2018-12-08`}</inlineCode>{`这样的字符串，然后通过`}<inlineCode parentName=\"p\">{`new Date`}</inlineCode>{`使用这些字符串构造出Date类型的对象，然后利用Date对象的`}<inlineCode parentName=\"p\">{`getFullYear()`}</inlineCode>{`、`}<inlineCode parentName=\"p\">{`getMonth()`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`getDate()`}</inlineCode>{`各方法，将日期转为`}<inlineCode parentName=\"p\">{`x月y日, zzzz（年）`}</inlineCode>{`的格式，最后将它替换原来的`}<inlineCode parentName=\"p\">{`innerHTML`}</inlineCode>{`属性，最后在网页中呈现的效果如下：`}</p>\n    <JCode codeId=\"7105278769576968206\" mdxType=\"JCode\" />\n    <h3 {...{\n      \"id\": \"javascript事件\"\n    }}>{`Javascript事件`}</h3>\n    <p>{`然后，我们给Javascript注册两个window事件：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<script type=\"text/javascript\">\n  const pubtimeEls = document.querySelectorAll('.pubtime em');\n  pubtimeEls.forEach((el) => {\n    const date = new Date(el.innerHTML);\n    el.innerHTML = \\`\\${date.getMonth() + 1}月\\${date.getDate()}日, \\${date.getFullYear()}\\`;\n  });\n\n  let title = document.title;\n  window.addEventListener('blur', () => {\n    document.title = '记得回来看我啊~';\n  });\n  window.addEventListener('focus', () => {\n    document.title = title;\n  });\n</script>\n`}</code></pre>\n    <p>{`上面的代码中，document.title的设置会改变head中title元素的内容，继而影响浏览器tab页上的文字标题。`}</p>\n    <p><inlineCode parentName=\"p\">{`window.addEventListener('blur')`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`window.addEventListener('focus')`}</inlineCode>{` 表示给window对象注册blur和focus事件， 它们分别表示失去焦点和获得焦点事件。addEventListener方法的第二个参数是一个事件方法， 表示当事件发生时，执行这个方法。`}</p>\n    <p>{`这段代码的执行效果是，当我们切换到其他浏览器tab时，博客首页的title改变成字符串“记得回来看我啊~”，而当我们切换回该Tab页时，网页title又恢复成原来的样子。如下图所示：`}</p>\n    <p><img alt=\"index-blur-focus\" src={require(\"./public/index-blur-focus.jpg\")} /></p>\n    <p {...{\n      \"className\": \"hint warn\"\n    }}>{`这个效果在`}<a parentName=\"p\" {...{\n        \"href\": \"https://code.juejin.cn\"\n      }}>{`码上掘金`}</a>{`中看不到，因为码上掘金的右侧是内嵌iframe窗口，浏览器不会在标签内显示iframe窗口里面的标题，要看到这个效果，你可以将下面的代码保存到一个本地的`}<inlineCode parentName=\"p\">{`index.html`}</inlineCode>{`文件中，然后浏览器打开文件访问，切换标签，就可以看到上面截图中的效果。`}</p>\n    <JCode codeId=\"7105283021548290079\" mdxType=\"JCode\" />\n    <h2 {...{\n      \"id\": \"小结\"\n    }}>{`小结`}</h2>\n    <p>{`从上面的例子，我们可以看到，JavaScript可以通过DOM API访问并改变网页中的内容，还可以通过事件响应用户的行为。实际上JavaScript的能力还远不止如此。在Web开发中，JavaScript通常在网页中承担：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`用户输入校验`}</li>\n      <li parentName=\"ul\">{`动态向服务器提交和获取数据`}</li>\n      <li parentName=\"ul\">{`存储和处理用户数据和操作状态`}</li>\n      <li parentName=\"ul\">{`丰富页面展现形式等职责。`}</li>\n    </ul>\n    <p>{`此外，JavaScript在Web工程中还承担工程化构建和部署、单元测试、集成测试、脚本编译、打点统计等功能以及其他丰富用途。关于JavaScript使用的各个方面，在后续课程中我们会有机会一一深入讲解。`}</p>\n\n    <Pagination previous={{\n      name: '上一节',\n      src: 'layout_and_styles'\n    }} next={{\n      name: '下一节',\n      src: 'publish_your_blog_work'\n    }} mdxType=\"Pagination\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/index-blur-focus-b721d6d67a929bad6f5bed260e520f21.jpg\";","module.exports = __webpack_public_path__ + \"static/html-css-javascript-b19faf7726b1c5e9c6ec9bfa9e256d14.jpg\";"],"sourceRoot":""}